@{
    var idioma = Session["Idioma"] != null ? Session["Idioma"].ToString() : "en";

    var bandeiras = new Dictionary<string, string>
{
        { "pt", "<span class='fi fi-br'></span> Português (Brasil)" },
        { "pt-PT", "<span class='fi fi-pt'></span> Português (Portugal)" },
        { "en", "<span class='fi fi-us'></span> English" },
        { "es", "<span class='fi fi-es'></span> Español" },
        { "fr", "<span class='fi fi-fr'></span> Français" },
        { "de", "<span class='fi fi-de'></span> Deutsch" },
        { "it", "<span class='fi fi-it'></span> Italiano" }
    };

    var idiomaAtual = bandeiras.ContainsKey(idioma) ? bandeiras[idioma] : "<span class='fi fi-world'></span> Idioma";
}
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewBag.Title - Meu Aplicativo ASP.NET</title>

    @Styles.Render("~/Content/css")
    @Scripts.Render("~/bundles/modernizr")

    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flag-icons/css/flag-icons.min.css" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link rel="icon" type="image/png" href="~/Content/favicon.png" />
</head>
<body>
    <nav class="navbar navbar-expand-sm navbar-dark bg-dark">
        <div class="container">
            @Html.ActionLink("Nome do aplicativo", "Index", "Home", null, new { @class = "navbar-brand" })
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav"
                    aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav me-auto">
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                            @Html.Raw(idiomaAtual)
                        </a>
                        <ul class="dropdown-menu">
                            @foreach (var item in bandeiras)
                            {
                                <li>
                                    <a class="dropdown-item" href="@Url.Action("Trocar", "Idioma", new { lang = item.Key, returnUrl = Request.RawUrl })">
                                        @Html.Raw(item.Value)
                                    </a>
                                </li>
                            }
                        </ul>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    <div class="container body-content mt-3">
        @RenderBody()
        <hr />
        <footer>
            <p class="traduzir">&copy; @DateTime.Now.Year - Meu Aplicativo ASP.NET</p>
        </footer>
    </div>

    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")
    @RenderSection("scripts", required: false)

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        document.addEventListener("DOMContentLoaded", async () => {
            const idioma = '@(Session["Idioma"] ?? "en")';

            const elementos = document.querySelectorAll(".traduzir");

            let textosOriginais = [];

            elementos.forEach(e => {
                if (e.children.length === 0 && e.innerText.trim() !== "") {
                    textosOriginais.push(e.innerText.trim());
                }
            });

            textosOriginais = [...new Set(textosOriginais)];

            if (!["pt", "pt-PT"].includes(idioma)) {
                for (const texto of textosOriginais) {
                    const url = `https://translate.googleapis.com/translate_a/single?client=gtx&sl=pt&tl=${idioma}&dt=t&q=${encodeURIComponent(texto)}`;
                    try {
                        const res = await fetch(url);
                        const data = await res.json();
                        const traducao = data[0][0][0];

                        elementos.forEach(e => {
                            if (e.children.length === 0 && e.innerText.trim() === texto) {
                                e.innerText = traducao;
                            }
                        });
                    } catch (err) {
                        console.error("Erro ao traduzir:", texto);
                    }
                }
            }
        });
    </script>
</body>
</html>
